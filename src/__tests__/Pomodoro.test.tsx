import '@testing-library/jest-dom'
import { act, render, screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import Pomodoro from '../renderer/pages/Pomodoro'
import { formatRemainingTime, getTimeInfo } from '../renderer/components/pomodoro'

describe('Pomodoro', () => {
  it('Ï†ïÏÉÅ Î†åÎçîÏó¨Î∂Ä', () => {
    expect(render(<Pomodoro />)).toBeTruthy()
  })

//   it('ÎΩÄÎ™®ÎèÑÎ°ú ÌÉÄÏù¥Î®∏ ÏãúÏûë Î≤ÑÌäº ÏÑ†ÌÉù ÌõÑ ÏãúÍ∞ÑÏù¥ ÎÇ®ÏùÄ ÏÉÅÌÉúÏóêÏÑú Ïû¨ÏÑ†ÌÉù Ïãú ÌÉÄÏù¥Î®∏Í∞Ä Ï§ëÎã®ÎêúÎã§', async () => {
//     render(<Pomodoro />)

//     const button = await screen.findByRole('button', { name: /üî•/ })
//     // ÌÉÄÏù¥Î®∏ ÏãúÏûë
//     const timeInfo = getTimeInfo(true)
//     const pomodoroInitTime = formatRemainingTime(timeInfo.POMODORO_SEC)
//     const remainingTimeElem = screen.getByText(pomodoroInitTime)
//     await userEvent.click(button)

//     // ÌÉÄÏù¥Î®∏Í∞Ä Ï¢ÖÎ£åÎêòÏóàÎäîÏßÄ ÌôïÏù∏
//     await act(async () => {
//       await new Promise((resolve) => {
//         setTimeout(resolve, (timeInfo.POMODORO_SEC - 2) * 1000)
//       })
//       // ÌÉÄÏù¥Î®∏ ÏãúÏûë
//       await userEvent.click(button)

//       expect(button).toHaveTextContent(/‚è∏Ô∏è/)

//       // Ïôú ÏïàÏ§ÑÏñ¥Îì§ÏßÄ?
//     //   expect(remainingTimeElem).not.toHaveTextContent(pomodoroInitTime)
//     })
//   })

  it('ÎΩÄÎ™®ÎèÑÎ°ú ÌÉÄÏù¥Î®∏ Ï¢ÖÎ£å Ïãú Ìú¥ÏãùÏïÑÏù¥ÏΩòÏúºÎ°ú Î≥ÄÍ≤ΩÎêòÍ≥† ÎÇ®ÏùÄ ÏãúÍ∞ÑÏù¥ Ìú¥ÏãùÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÍ≤ΩÎêúÎã§.', async () => {
    render(<Pomodoro />)

    const button = await screen.findByRole('button', { name: /üî•/ })
    const timeInfo = getTimeInfo(true)
    const pomodoroTime = formatRemainingTime(timeInfo.POMODORO_SEC)
    const remainingTimeElem = screen.getByText(pomodoroTime)
    await userEvent.click(button)

    // ÌÉÄÏù¥Î®∏Í∞Ä ÏãúÏûëÎêòÏóàÎäîÏßÄ ÌôïÏù∏
    expect(remainingTimeElem).toBeInTheDocument()

    // ÌÉÄÏù¥Î®∏Í∞Ä Ï¢ÖÎ£åÎêòÏóàÎäîÏßÄ ÌôïÏù∏
    await act(async () => {
      await new Promise((resolve) => {
        setTimeout(resolve, (timeInfo.POMODORO_SEC + 1) * 1000)
      })
    })

    expect(button).toHaveTextContent(/‚òïÔ∏è/)
    expect(remainingTimeElem).toHaveTextContent(formatRemainingTime(timeInfo.REST_SEC))
  })
})
